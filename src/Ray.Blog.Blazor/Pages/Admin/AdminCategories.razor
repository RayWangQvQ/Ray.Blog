@page "/admin/categories"

@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Configuration
@using Ray.Blog.Blobs
@using Ray.Blog.Permissions
@using System.IO
@using Volo.Abp.Application.Dtos
@using Ray.Blog.Categories
@using Ray.Blog.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Content

@inject IStringLocalizer<BlogResource> L
@inject AbpBlazorMessageLocalizerHelper<BlogResource> LH

@inherits AbpCrudPageBase<ICategoryAppService, CategoryDto, Guid, PagedAndSortedResultRequestDto, CreateCategoryDto>
@attribute [Authorize(BlogPermissions.Categories.Default)]

<Card>

    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Catetories"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                        @L["NewCatetory"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>

    <CardBody>

        <DataGrid TItem="CategoryDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">

            <DataGridColumns>
                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>

                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.Alias)"
                                Caption="@L["Alias"]">
                </DataGridColumn>

                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridEntityActionsColumn TItem="CategoryDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="CategoryDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="CategoryDto"
                                          Text="@L["Edit"]"
                                          Visible="HasUpdatePermission"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="CategoryDto"
                                          Text="@L["Delete"]"
                                          Visible="HasDeletePermission"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

            </DataGridColumns>

        </DataGrid>

    </CardBody>

</Card>


<Modal @ref="@CreateModal">
    @*<ModalBackdrop />*@
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewCatetory"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Alias"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.Alias" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["PicUrl"]</FieldLabel>
                        <FileEdit Filter="image/*" Changed="@OnImageUploadChanged" Ended="@OnImageUploadEnded" />
                        <Figure Size="FigureSize.Is256x256">
                            <FigureImage Source="@NewEntity.PicUrl" AlternateText="empty-256x256" />
                            <FigureCaption>A caption for the above image.</FigureCaption>
                        </Figure>
                    </Field>
                </Validations>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


<Modal @ref="@EditModal">
    @*<ModalBackdrop />*@
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Alias"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.Alias" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["PicUrl"]</FieldLabel>
                        <FileEdit Filter="image/*" Changed="@OnImageUploadChanged" Ended="@OnImageUploadEnded" />
                        <Figure Size="FigureSize.Is256x256">
                            <FigureImage Source="@EditingEntity.PicUrl" AlternateText="empty-256x256" />
                            <FigureCaption>A caption for the above image.</FigureCaption>
                        </Figure>
                    </Field>
                </Validations>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {
    [Inject]
    protected IBlobAppService BlobAppService { get; set; }

    [Inject]
    protected IWebAssemblyHostEnvironment Environment { get; set; }

    [Inject]
    protected IConfiguration Configuration { get; set; }

    public AdminCategories()
    {
        CreatePolicyName = BlogPermissions.Categories.Create;
        UpdatePolicyName = BlogPermissions.Categories.Edit;
        DeletePolicyName = BlogPermissions.Categories.Delete;
    }

    private Uri _hostBaseAddress => new Uri(Environment.BaseAddress);

    #region UploadImg

    private Dictionary<string, Stream> _imageStreamDictionary = new Dictionary<string, Stream>();

    async Task OnImageUploadChanged(FileChangedEventArgs e)
    {
        var file = e.Files.FirstOrDefault();
        await using var stream = new System.IO.MemoryStream();
        _imageStreamDictionary.Add(file.Name, stream);
        await file.WriteToStreamAsync(stream);
    }

    async Task OnImageUploadEnded(FileEndedEventArgs e)
    {
        var stream = _imageStreamDictionary[e.File.Name];
        stream.Seek(0, SeekOrigin.Begin);
        var imgUri = await BlobAppService.UploadCategoryPics(new RemoteStreamContent(stream, e.File.Name));

        var hostBaseAddress = Configuration["RemoteServices:Default:BaseUrl"];
        e.File.UploadUrl = $"{hostBaseAddress}{imgUri}";
        NewEntity.PicUrl = EditingEntity.PicUrl = e.File.UploadUrl;
        Console.WriteLine($"Finished Image: {e.File.Name}, Success: {e.Success}");

        _imageStreamDictionary.Remove(e.File.Name);
    }

    #endregion
}
