@page "/admin/posts"

@using Ray.Blog.Permissions
@using Volo.Abp.Application.Dtos
@using Ray.Blog.Posts
@using Ray.Blog.Localization
@using Microsoft.Extensions.Localization
@using Blazorise.Markdown

@inherits AbpCrudPageBase<IPostsAppService, PostDto, Guid, PagedAndSortedResultRequestDto, CreatePostDto>
@attribute [Authorize(BlogPermissions.Posts.Default)]

@inject IStringLocalizer<BlogResource> L
@inject AbpBlazorMessageLocalizerHelper<BlogResource> LH

<Card>

    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Posts"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                        @L["NewPost"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>

    <CardBody>

        <DataGrid TItem="PostDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">

            <DataGridColumns>
                <DataGridColumn TItem="PostDto"
                                Field="@nameof(PostDto.Title)"
                                Caption="@L["Title"]"></DataGridColumn>

                <DataGridColumn TItem="PostDto"
                                Field="@nameof(PostDto.Url)"
                                Caption="@L["Url"]">
                </DataGridColumn>

                <DataGridColumn TItem="PostDto"
                                Field="@nameof(PostDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridEntityActionsColumn TItem="PostDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="PostDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="PostDto"
                                          Text="@L["Edit"]"
                                          Visible="HasUpdatePermission"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="PostDto"
                                          Text="@L["Delete"]"
                                          Visible="HasDeletePermission"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

            </DataGridColumns>

        </DataGrid>

    </CardBody>

</Card>


<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewPost"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Url"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.Url" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["Markdown"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.Markdown" />
                    </Field>
                </Validations>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Title</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Url"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.Url" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["Markdown"]</FieldLabel>
                        @*<TextEdit @bind-Text="EditingEntity.Markdown" />*@
                        <Markdown @bind-Value="EditingEntity.Markdown" />
                    </Field>
                </Validations>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {
    public AdminPosts()
    {
        CreatePolicyName = BlogPermissions.Posts.Create;
        UpdatePolicyName = BlogPermissions.Posts.Edit;
        DeletePolicyName = BlogPermissions.Posts.Delete;
    }
}
