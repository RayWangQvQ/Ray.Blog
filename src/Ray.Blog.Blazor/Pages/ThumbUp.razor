@using Ray.Blog.Posts
@using Ray.Blog.ThumbUps
@using Volo.Abp.Application.Dtos
@using Volo.Abp.Users

<Button Margin="Margin.Is2" Size="@this.Size" Border="@_thumbButtonBorder" Shadow="Shadow.Large" onclick="@OnThumbUpClicked">
    <Icon Name="IconName.ThumbsUp" TextColor="@_textColor" /> @this._thumbUpDtos.Count
</Button>

@code {
    [Parameter]
    public Guid SourceId { get; set; }

    [Parameter]
    public ThumbUpSourceType ThumbUpSourceType { get; set; }

    [Parameter]
    public Size Size { get; set; }

    [Parameter]
    public IFluentBorder ThumbButtonBorderBefore { get; set; }
    [Parameter]
    public IFluentBorder ThumbButtonBorderAfter { get; set; }

    [Inject]
    private IThumbUpAppService ThumbUpAppService { get; set; }

    [Inject]
    private ICurrentUser CurrentUser { get; set; }

    private IReadOnlyList<ThumbUpDto> _thumbUpDtos = new List<ThumbUpDto>();

    private IFluentBorder _thumbButtonBorder = Border.Is1.Rounded.Secondary;

    private TextColor _textColor = TextColor.Secondary;

    private bool IsThumbUped => _thumbUpDtos.Any(x => x.CreatorId == CurrentUser.Id);

    protected override async Task OnInitializedAsync()
    {
        await SetThumbUpDtos();

        if (IsThumbUped)
        {
            SetThumbUp();
        }
        else
        {
            SetUnThumbUp();
        }

        await base.OnInitializedAsync();
    }

    private async Task SetThumbUpDtos()
    {
        _thumbUpDtos = (await ThumbUpAppService.GetListAsync(new GetThumbUpListDto()
            {
                SourceId = this.SourceId,
                MaxResultCount = LimitedResultRequestDto.MaxMaxResultCount
            })).Items;
    }

    public async Task OnThumbUpClicked()
    {
        if (!IsThumbUped)
        {
            await ThumbUpAppService.CreateAsync(new ThumbUpDto()
                {
                    SourceType = this.ThumbUpSourceType,
                    SourceId = this.SourceId
                });
            SetThumbUp();
            await SetThumbUpDtos();
            return;
        }

        var id = _thumbUpDtos.FirstOrDefault(x => x.SourceId == this.SourceId && x.CreatorId == CurrentUser.Id)?.Id;
        if (id.HasValue)
        {
            await ThumbUpAppService.DeleteAsync(id.Value);
            SetUnThumbUp();
            await SetThumbUpDtos();
        }
    }

    private void SetUnThumbUp()
    {
        if (ThumbButtonBorderBefore != null)
            _thumbButtonBorder = ThumbButtonBorderBefore;
        _textColor = TextColor.Secondary;
    }

    private void SetThumbUp()
    {
        if (ThumbButtonBorderAfter != null)
            _thumbButtonBorder = ThumbButtonBorderAfter;
        _textColor = TextColor.Success;
    }
}
