@inherits BlogComponentBase

@using Ray.Blog.Comments
@using Blazorise.Markdown

<Container>

    <Divider DividerType="DividerType.TextContent" Text="评论列表" />

    <ListGroup Flush>
        @{
            for (int i = 0; i < this.CommentList.Count; i++)
            {
                var item = this.CommentList[i];
                <ListGroupItem>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">List group item heading</Heading>
                        <Small>@item.CreationTime</Small>
                    </Div>
                    <Paragraph Margin="Margin.Is1.FromBottom">@item.Text</Paragraph>
                    <Small>And some small print.</Small>
                </ListGroupItem>
            }
        }
    </ListGroup>

    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = 1; i <= pageItems; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>

    <Markdown @bind-Value="this.NewComment.Text" Height="Height.Is25" Width="Width.Is50"></Markdown>
    <Button Color="Color.Primary" Clicked="OnAddCommentButtonClickedAsync">发送</Button>

</Container>

@code {
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";

    private string currentPage = "1";
    private int pageItems = 5;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private async Task SetActive(string page)
    { 
        currentPage = page;
        await GetCommentsAsync();
    }
}
