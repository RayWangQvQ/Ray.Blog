@using Ray.Blog.Comments
@using Volo.Abp.Application.Dtos
@inherits BlogComponentBase

<DataGrid TItem="KeyValuePair<int, CommentDto>"
          Data="CommentDicList"
          ReadData="OnDataGridReadAsync"
          TotalItems="TotalCount"
          ShowPager="false"
          PageSize="PageSize"
          Borderless="true">
    <DetailRowTemplate>
        @{
            <Row>
                <Column ColumnSize="ColumnSize.Is1">
                    <Text TextColor="TextColor.Secondary">@context.Key</Text>
                </Column>
                <Column>
                    <Text>@context.Value.Text</Text>
                </Column>
            </Row>
        }


    </DetailRowTemplate>
</DataGrid>

@code {
    [Inject]
    ICommentsAppService CommentsAppService { get; set; }

    private IReadOnlyList<CommentDto> CommentList { get; set; } = new List<CommentDto>();
    private IReadOnlyList<KeyValuePair<int, CommentDto>> CommentDicList { get; set; } = new List<KeyValuePair<int, CommentDto>>();

    private int PageSize { get; } = 5;
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; } = $"{nameof(CommentDto.CreationTime)} desc";
    private int TotalCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAuthorsAsync();
    }

    private async Task GetAuthorsAsync()
    {
        var result = await CommentsAppService.GetListAsync(
            new GetCommentListDto
            {
                MaxResultCount = PageSize,
                SkipCount = CurrentPage * PageSize,
                Sorting = CurrentSorting,
            }
        );

        CommentList = result.Items;
        var dicList = new List<KeyValuePair<int, CommentDto>>();
        for (int i = 0; i < PageSize; i++)
        {
            dicList.Add(new KeyValuePair<int, CommentDto>(i + 1, result.Items[i]));
        }
        CommentDicList = dicList;

        TotalCount = (int)result.TotalCount;
    }

    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<KeyValuePair<int, CommentDto>> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.Direction != SortDirection.None)
            .Select(c => c.Field + (c.Direction == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetAuthorsAsync();

        await InvokeAsync(StateHasChanged);
    }
}
